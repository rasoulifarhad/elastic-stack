#Match all query
GET books/_search
{
  "query": {
    "match_all": {}
  }
}

GET books/_search
{
  "query": {
    "match": {
      "author": "Cay"
    }
  }
}

# Match query searching Java titles
GET books/_search
{
  "query": {
    "match": {
      "title": "Java"
    }
  }
}

# Match query searching for a set of words (like a sentence)
GET books/_search
{
  "query": {
    "match": {
      "title": {
        "query": "Java Complete Guide"
      }
    }
  },
  "highlight": {
    "fields": {
      "title": {}
    }
  }
}

# Same as above query but specifying OR operator explicitly
GET books/_search
{
  "query": {
    "match": {
      "title": {
        "query": "Java Complete Guide",
        "operator": "OR"
      }
    }
  }
}

# Specifying AND operator explicitly
GET books/_search
{
  "query": {
    "match": {
      "title": {
        "query": "Java Complete Guide",
        "operator": "AND"
      }
    }
  }
}

# Matching at least two words 
GET books/_search
{
  "query": {
    "match": {
      "title": {
        "query": "Java Complete Guide",
        "operator": "OR",
        "minimum_should_match": 2
      }
    }
  }
}
 
# Matching on an incorrect title (spelling mistake) - no results
GET books/_search
{
  "query": {
    "match": {
      "title": {
        "query": "Kava"
      }
    }
  }
}

# Matching on an incorrect title (spelling mistake) - with fuzziness- postive results
GET books/_search
{
  "query": {
    "match": {
      "title": {
        "query": "Kava",
        "fuzziness": 1
      }
    }
  }
}

# Match phrase query
GET books/_search
{
  "query": {
    "match_phrase": {
      "synopsis": "book for every Java programmer"
    }
  }
}

# Match phrase query with slop - missing one word
GET books/_search
{
  "query": {
    "match_phrase": {
      "synopsis": {
       "query": "book every Java programmer",
       "slop": 1
      }
    }
  }
}

# Match phrase query with jumbled up words will not work - even with slop
GET books/_search
{
  "query": {
    "match_phrase": {
      "synopsis": {
       "query": "for every Java programmer book",
       "slop": 1
      }
    }
  }
}

##Match all query with a pre-defined score
GET books/_search
{
  "query": {
    "match_all": {
      "boost": 2
    }
  }
}

# Match phrase prefix 
GET books/_search
{
  "query": {
    "match_phrase_prefix": {
      "tags": {
        "query": "concepts and found"
      }
    }
  },
  "highlight": {
    "fields": {
      "tags": {}
    }
  }
}
# Match phrase prefix with slop - omitting "and"
GET books/_search
{
  "query": {
    "match_phrase_prefix": {
      "tags": {
        "query": "concepts found",
        "slop":1
      }
    }
  }
}

# Multi-match query
GET books/_search
{
  "_source": false, 
  "query": {
    "multi_match": {
      "query": "Java",
      "fields": [
        "title",
        "synopsis",
        "tags"
      ]
    }
  },
  "highlight": {
    "fields": {
      "title": {},
      "tags": {}
    }
  }
}

# dis_max query
GET books/_search
{
  "_source": false, 
  "query": {
    "dis_max": {
      "queries": [
        {"match": {"title": "Design Patterns"}},
        {"match": {"synopsis": "Design Patterns"}}],
        "tie_breaker": 0.5
    }
  },
  "highlight": {
    "fields": {
      "title": {},
      "synopsis": {},
      "tags": {}
    }
  }
}

# Boosting individual queries
GET books/_search
{
  "query": {
    "multi_match": {
      "query": "C# guide",
      "fields": ["title^2", "tags"]
    }
  }
}
